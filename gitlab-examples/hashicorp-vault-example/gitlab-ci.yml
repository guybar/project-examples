stages:
  - get-token
  - build
  - clean-up

variables:
  ENV_VARIABLES: ./variables.env

get-token:
  stage: get-token
  image: vault:latest
  script:
    # Vault's address can be provided here or as CI/CD variable
    - export VAULT_ADDR=$VAULT_URL
    # Authenticate and get token. Token expiry time and other properties can be configured
    # when configuring JWT Auth - https://www.vaultproject.io/api-docs/auth/jwt#parameters-1
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=demo-artifactory jwt=$CI_JOB_JWT)"
    # Now use the VAULT_TOKEN to read the secret and store it in an environment variable
    - export TOKEN="$(vault kv get artifactory/roles/gitlab)"
    # Use the secret
    - echo "$TOKEN" > $ENV_VARIABLES
    - cat $ENV_VARIABLES
  artifacts:
    paths:
      - $ENV_VARIABLES

gitlab-ci-gradle-build: #This job name will be used as the build info repository name in artifactory
  stage: build
  image: gradle:latest
  script:
    # - source ./$ENV_VARIABLES
    - TOKEN=$(cat $ENV_VARIABLES | sed -n 's/access_token    \(.*\)/\1/p')
    # Download JFrog CLI
    -  curl -fL https://install-cli.jfrog.io | sh
    # configure artifactory server
    - jf config add rt-demo --url=JFROG_PLATFORM_URL --access-token=$TOKEN
    # configure gradle, set upload and download repos
    - jf gradlec --repo-resolve rt-demo\gradle-virtual --repo-deploy rt-demo\gradle-virtual --server-id-deploy rt-demo --server-id-resolve rt-demo

    # upload the built artifact to artifactory
    # - jf gradle clean artifactoryPublish -b build.gradle --build-name=$CI_JOB_NAME --build-number=$CI_JOB_ID
    - jf gradle clean artifactoryPublish --build-name=$CI_JOB_NAME --build-number=$CI_JOB_ID
    # Collect environment variables for the build
    - jf rt bce $CI_JOB_NAME $CI_JOB_ID
    # Collect VCS details from git and add them to the build
    - jf rt bag $CI_JOB_NAME $CI_JOB_ID
    # Publish build info
    - jf rt bp $CI_JOB_NAME $CI_JOB_ID
    # Scan with xray
    - jf bs $CI_JOB_NAME $CI_JOB_ID
  needs:
    - job: get-token
      artifacts: true

clean-up:
  stage: clean-up
  script:
    - rm $ENV_VARIABLES
  when: always
  needs:
    - job: gitlab-ci-gradle-build
      artifacts: true